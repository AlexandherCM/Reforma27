
insert into dbo.Usuario (PerfilID, Nombre, Correo, Clave) values (1, 'Alexandher CM', 'alexandhercordoba378@gmail.com', '2312-ACM')

foreach (var serie in viewModel.NumerosSerie)
            {
                if (await _context.Equipo.AnyAsync(e => e.NumSerie == serie))
                {
                    throw new NumeroSerieDuplicadoException(serie);
            }
            }
    public class NumeroSerieDuplicadoException : Exception
    {
        public NumeroSerieDuplicadoException(string numeroSerie)
            : base($"El número de serie '{numeroSerie}' ya existe.")
        {
        }
    }

Hola Mundo ;3

data set en los elementos

row.innerHTML = `
    <td class="border-R">${TheObject.nombre}</td>
    <td class="border-R">
        <label class="toggle-switch">
            <input class="${Propeties.Chbx}" type="checkbox" data-form-id="${form.id}" checked="${TheObject.estado}">
            <div class="toggle-switch-background">
                <div class="toggle-switch-handle"></div>
            </div>
        </label>
    </td>
    <td class="border-R">
        <img class="remover" src="../../images/pen-to-square-solid.svg" />
    </td>
    <td class="border-R">
        <img class="remover" src="../../images/eye-solid.svg" />
    </td>
`;

// Obtener el checkbox recién creado
let nuevoCheckbox = row.querySelector(`.${Propeties.Chbx}`);

// Asignar el manejador de eventos al cambio del checkbox
nuevoCheckbox.addEventListener('change', () => {
    CheckboxListeners(nuevoCheckbox, form.id);
});



<aside class="row position-fixed fixed-bottom" style="padding-right:1%;">

    <article class="col-12 col-lg-9 "></article>

    <article class="col-12 col-lg-3 border border-dark bg-R rounded-3" id="form-b">

        <section class="row text-light text-center justify-content-center" id="fBody">

            <h4 class="pt-3">Registra un proveedor</h4>

            @*Nombre*@
            <div class="row pt-1">
                <h5>Nombre</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Teléfono*@
            <div class="row pt-1">
                <h5>Teléfono</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Dirección*@
            <div class="row pt-1">
                <h5>Dirección</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Correo*@
            <div class="row pt-1">
                <h5>Correo</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Boton*@
            <div class="row pt-3 mb-2 d-flex justify-content-center">
                <input type="button" value="Agregar" class="boton" style="width:80%; margin:auto;">
            </div>

            <br>
        </section>

        <div class="row text-center" style="background: #fff;">

            <h3 class="pt-2 pb-1 ">

                <span class="color-R">P</span>roveedores <img src="~/images/up.svg" alt="up"
                                                              class="down" id="up1">
                <img src="~/images/down.svg" class="down d-none" alt="down" id="down1">

            </h3>

        </div>

    </article>

</aside>


// Tareas en segundo plano - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
builder.Services.AddHostedService<WorkerAutomaticMtos>().AddSingleton<AutomaticMtos>();
//builder.Services.AddHostedService<Worker>().AddSingleton<IFileData, FileDataService>();
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 //_logger.LogInformation("Background service is running.");

 type="month"


 using (IServiceScope scope = _serviceProvider.CreateScope())
                {
                    IMtoRepository mtoRepository = scope.ServiceProvider.GetService<IMtoRepository>();
                    List<MtoProgramado> Mtos = await mtoRepository.GetMtosProgramados();

                    DateTime NowTime = DateTime.Now;

                    if (Mtos.Any())
                    {
                        Mtos.ForEach(mto =>
                        {
                            var ProximaAplicacion = mtoRepository.ObtenerFecha(mto.ProximaAplicacion);
                            int comparacion = NowTime.CompareTo(ProximaAplicacion);

                            if (comparacion > -1)
                            {
                                MtoProgramado newMto = new()
                                {
                                    EquipoID = mto.Equipo.ID,
                                    UltimaAplicacion = mto.ProximaAplicacion,
                                    ProximaAplicacion = mtoRepository.CrearEpoch(ProximaAplicacion.AddSeconds(mto.Equipo.Variante.Periodo.Meses)),
                                    Aplicable = true,
                                    Aplicado = false
                                };

                                // Agregar a la base de datos
                                mtoRepository.AddEntity(newMto);
                                mto.Aplicable = false;
                            }
                        });

                        await mtoRepository.Save();
                        await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken); // Delay de 5 segundos
                    }
                    else
                        await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken); // Delay de 5 segundos
                }