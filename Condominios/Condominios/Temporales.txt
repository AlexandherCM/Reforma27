
insert into dbo.Usuario (PerfilID, Nombre, Correo, Clave) values (1, 'Alexandher CM', 'alexandhercordoba378@gmail.com', '2312-ACM')

foreach (var serie in viewModel.NumerosSerie)
            {
                if (await _context.Equipo.AnyAsync(e => e.NumSerie == serie))
                {
                    throw new NumeroSerieDuplicadoException(serie);
            }
            }
    public class NumeroSerieDuplicadoException : Exception
    {
        public NumeroSerieDuplicadoException(string numeroSerie)
            : base($"El número de serie '{numeroSerie}' ya existe.")
        {
        }
    }

Hola Mundo ;3

data set en los elementos

row.innerHTML = `
    <td class="border-R">${TheObject.nombre}</td>
    <td class="border-R">
        <label class="toggle-switch">
            <input class="${Propeties.Chbx}" type="checkbox" data-form-id="${form.id}" checked="${TheObject.estado}">
            <div class="toggle-switch-background">
                <div class="toggle-switch-handle"></div>
            </div>
        </label>
    </td>
    <td class="border-R">
        <img class="remover" src="../../images/pen-to-square-solid.svg" />
    </td>
    <td class="border-R">
        <img class="remover" src="../../images/eye-solid.svg" />
    </td>
`;

// Obtener el checkbox recién creado
let nuevoCheckbox = row.querySelector(`.${Propeties.Chbx}`);

// Asignar el manejador de eventos al cambio del checkbox
nuevoCheckbox.addEventListener('change', () => {
    CheckboxListeners(nuevoCheckbox, form.id);
});



<aside class="row position-fixed fixed-bottom" style="padding-right:1%;">

    <article class="col-12 col-lg-9 "></article>

    <article class="col-12 col-lg-3 border border-dark bg-R rounded-3" id="form-b">

        <section class="row text-light text-center justify-content-center" id="fBody">

            <h4 class="pt-3">Registra un proveedor</h4>

            @*Nombre*@
            <div class="row pt-1">
                <h5>Nombre</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Teléfono*@
            <div class="row pt-1">
                <h5>Teléfono</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Dirección*@
            <div class="row pt-1">
                <h5>Dirección</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Correo*@
            <div class="row pt-1">
                <h5>Correo</h5>
            </div>
            <div class="row d-flex justify-content-center pt-1">
                <input type="text" class="txtForm">
            </div>

            @*Boton*@
            <div class="row pt-3 mb-2 d-flex justify-content-center">
                <input type="button" value="Agregar" class="boton" style="width:80%; margin:auto;">
            </div>

            <br>
        </section>

        <div class="row text-center" style="background: #fff;">

            <h3 class="pt-2 pb-1 ">

                <span class="color-R">P</span>roveedores <img src="~/images/up.svg" alt="up"
                                                              class="down" id="up1">
                <img src="~/images/down.svg" class="down d-none" alt="down" id="down1">

            </h3>

        </div>

    </article>

</aside>


// Tareas en segundo plano - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
builder.Services.AddHostedService<WorkerAutomaticMtos>().AddSingleton<AutomaticMtos>();
//builder.Services.AddHostedService<Worker>().AddSingleton<IFileData, FileDataService>();
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 //_logger.LogInformation("Background service is running.");

 type="month"


 using (IServiceScope scope = _serviceProvider.CreateScope())
                {
                    IMtoRepository mtoRepository = scope.ServiceProvider.GetService<IMtoRepository>();
                    List<MtoProgramado> Mtos = await mtoRepository.GetMtosProgramados();

                    DateTime NowTime = DateTime.Now;

                    if (Mtos.Any())
                    {
                        Mtos.ForEach(mto =>
                        {
                            var ProximaAplicacion = mtoRepository.ObtenerFecha(mto.ProximaAplicacion);
                            int comparacion = NowTime.CompareTo(ProximaAplicacion);

                            if (comparacion > -1)
                            {
                                MtoProgramado newMto = new()
                                {
                                    EquipoID = mto.Equipo.ID,
                                    UltimaAplicacion = mto.ProximaAplicacion,
                                    ProximaAplicacion = mtoRepository.CrearEpoch(ProximaAplicacion.AddSeconds(mto.Equipo.Variante.Periodo.Meses)),
                                    Aplicable = true,
                                    Aplicado = false
                                };

                                // Agregar a la base de datos
                                mtoRepository.AddEntity(newMto);
                                mto.Aplicable = false;
                            }
                        });

                        await mtoRepository.Save();
                        await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken); // Delay de 5 segundos
                    }
                    else
                        await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken); // Delay de 5 segundos
                }


                

            // -1 = La fecha es menor que la segunda
            // 0  = La fecha es igual que la segunda
            // 1  = La fecha es mayor que la segunda


            protected override async Task ExecuteAsync(CancellationToken stoppingToken)
{
    var now = DateTime.Now;
    var nextExecutionTime = new DateTime(now.Year, now.Month, now.Day, 22, 27, 0);
    var delayUntilNextExecution = nextExecutionTime - now;

    var timer = new System.Timers.Timer(delayUntilNextExecution.TotalMilliseconds);
    timer.Elapsed += (sender, e) =>
    {
        Console.WriteLine("Hola Mundo");

        // Establece el temporizador para que se dispare cada minuto
        timer.Interval = TimeSpan.FromMinutes(1).TotalMilliseconds;
    };

    timer.Start();

    while (!stoppingToken.IsCancellationRequested)
    {
        await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);
    }

    timer.Stop();
}


        // Save para la tarea en segundo plano
        public void AddEntity(MtoProgramado mto)
            => _context.Add(mto);

        public async Task Save()
            => await _context.SaveChangesAsync();

        public DateTime ObtenerFecha(double epoch)
            => _epoch.ObtenerFecha(epoch);

        public long CrearEpoch(DateTime fecha)
            => _epoch.CrearEpoch(fecha);

        public string ObtenerMesYAnio(DateTime fecha)
        {
            throw new NotImplementedException();
        }


        @Model.Equipos[i].ID

        //[DataType(DataType.Date)]
        //[DisplayFormat(DataFormatString = "{0:yyyy-MM}", ApplyFormatInEditMode = true)]


        // timeMonth en segundo plano
            Task<int> obtenerTimeMonthTask = Task.Run(async () =>
            {
                return await _context.MtoProgramado
                    .Where(m => m.ID == viewModel.TipoMantenimientoID)
                    .Include(m => m.Equipo.Variante.Periodo)
                    .Select(p => p.Equipo.Variante.Periodo.Meses)
                    .FirstOrDefaultAsync();
            });



            return RedirectToAction(nameof(Consultar), new { ID = viewModel.EquipoID });



             pendientes = equipos.GroupBy(equipo => equipo.Variante.TipoEquipo.Nombre)
                                .Select(group => new MtosPendientesViewModel
                                {
                                    TipoEquipo = group.Key,
                                    Cantidad = group.Count(),
                                    //CostoAd = group.Sum(e => e.CostoAdquisicion)
                                }).ToList();



//----------------------------------------------------------------------------------------------------
pendientes = equipos.GroupBy(equipo => new
            {
                TipoEquipo = equipo.Variante.TipoEquipo.Nombre,
                PeriodoNombre = equipo.Variante.Periodo.Nombre
            })
            .Select(group => new MtosPendientesViewModel
            {
                TipoEquipo = group.Key.TipoEquipo,
                Periodo = group.Key.PeriodoNombre,
                Cantidad = group.Count()
                //CostoAd = group.Sum(e => e.CostoAdquisicion)
            }).ToList();


//----------------------------------------------------------------------------------------------------

             pendientes = equipos.GroupBy(equipo => equipo.Variante.TipoEquipo.Nombre)
                                .Select(group => new MtosPendientesViewModel
                                {
                                    TipoEquipo = group.Key,
                                    Cantidad = group.Count(),
                                    Periodo = group.First().Variante.Periodo.Nombre,
                                    //CostoAd = group.Sum(e => e.CostoAdquisicion)
                                }).ToList();




css

:root {
    --minCardW: 240px;
    --maxCardW: 500px;
    --gap: 3rem;
}

var(--gap)



- - - - - - - Buscadores

@* Buscadores *@
<article class="row mt-4  justify-content-center text-center border-R rounded-2 align-items-center">

    <form>
        <h4 class="mt-3 mb-3"><span class="color-R">B</span>usqueda con filtros</h4>

        @* Selectes *@
        <section class="row text-center d-flex justify-content-between pb-3">

            <div class="col-4 col-lg-2 col-md-4 p-1">
                <select class="search" asp-items="Model.Marcas">
                    <option value="">Selecciona una marca</option>
                </select>
            </div>

            <div class="col-4 col-lg-2 col-md-4 p-1">
                <select class="search" asp-items="Model.TipoEquipos">
                    <option value="">Selecciona un tipo</option>
                </select>
            </div>

            <div class="col-4 col-lg-2 col-md-4 p-1">
                <select class="search" asp-items="Model.Motores">
                    <option value="">Selecciona un motor</option>
                </select>
            </div>

            <div class="col-4 col-lg-2 col-md-4 p-1">
                <select class="search" asp-items="Model.Ubicaciones">
                    <option value="">Selecciona una ubicación</option>
                </select>
            </div>

            <div class="col-4 col-lg-2 col-md-4 p-1">
                <select class="search" asp-items="Model.Periodos">
                    <option value="">Selecciona un periodo de mantenimiento</option>
                </select>
            </div>

        </section>

        @* Input *@
        <section class="row text-center d-flex justify-content-between align-items-center mb-3">

            <div class="col-6 col-md-6">
                <h5 class="mt-3 mb-3"><span class="color-R">E</span>quipos con mantenimiento programado en:</h5>
            </div>

            <div class="col-3 col-md-3">
                <input asp-for="FechaAplicacion" class="search" type="month" />
                <span asp-validation-for="FechaAplicacion" class="text-danger"></span>
            </div>

            <div class="col-3 col-md-2">
                <input type="submit" value="Buscar" class="boton btn-des h-100 p-2">
            </div>

        </section>
    </form>
</article>

@* Tabla de resultados *@
    <article class="row border-R rounded-3 text-dark mt-3 tabla-main">

        <table class="text-center">

            <thead>

                <tr class="border-R">

                    <th class="border-R" id="Nserie">
                        N°. Serie
                    </th>
                    <th class="border-R">
                        Marca
                    </th>
                    <th class="border-R">
                        Tipo
                    </th>
                    <th class="border-R">
                        Estatus
                    </th>
                    <th class="border-R">
                        Precio de adquisición
                    </th>
                    <th class="border-R">
                        Agregar
                    </th>

                </tr>

            </thead>

            <tbody>

                <tr>
                    <td class="border-R">000000</td>
                    <td class="border-R">xxxxxxx</td>
                    <td class="border-R">xxxxxxx</td>
                    <td class="border-R">xxxxxxx</td>
                    <td class="border-R">xxxxxxx</td>
                    <td class="border-R">
                        <img class="remover" src="~/images/circle-plus-solid.svg" />
                    </td>
                </tr>

            </tbody>

        </table>

    </article>

    /*.height-CreateMtos {
    height: 100%;*/
    /*overflow: auto;*/
/*}*/

/*.GRID-CONTAINER {
    display: flex;
    flex-wrap: wrap;
}

.sectionGtos {
    flex-grow: 1;
    flex-basis: 400px;
}

.sectionGtos > section:first-child {
    flex-basis: 500px;*/ /* Asignar un ancho menor al primer div */
/*}*/








Applic = viewModel.FechaAplicacion;
                MonthYear = new DateTime(Applic.Year, Applic.Month, 1, 0, 0, 0);
                Programming = _epoch.ObtenerFecha(mtoProgramado.ProximaAplicacion);

                if (!mtoProgramado.Aplicable)
                {
                    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                    _alertaEstado.Leyenda = "Aún no esta activo el mantenimiento para estos equipos.";
                    _alertaEstado.Estado = false;

                    return _alertaEstado;
                    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                }

                if (Programming.CompareTo(MonthYear) != 0)
                {
                    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                    _alertaEstado.Leyenda = "La fecha de aplicación debe estar dentro del periodo programado.";
                    _alertaEstado.Estado = false;

                    return _alertaEstado;
                    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                }

                mtoProgramado.Mantenimiento = new()
                {
                    TipoMantenimientoID = viewModel.TipoMantenimientoID,
                    ProveedorID = viewModel.ProveedorID,
                    CostoMantenimiento = viewModel.CostoMantenimiento,
                    CostoReparacion = viewModel.CostoReparacion ?? 0,
                    Observaciones = viewModel.Observaciones,
                    FechaAplicacion = _epoch.CrearEpoch(viewModel.FechaAplicacion)
                };

                mtoProgramado.Aplicado = true;
                mtoProgramado.Aplicable = false;
                mtoProgramado.Estado = false;

                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                newMto = CrearObjeto(Programming, mtoProgramado.Equipo.Variante.Periodo.Meses);
                newMto.EquipoID = mtoProgramado.EquipoID;

                _context.Add(newMto);



- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


public async Task<AlertaEstado> ConfirmarMto(MantenimientoViewModel viewModel)
        {
            var mtoProgramado = await _context.MtoProgramado
                                        .Include(m => m.Equipo.Variante.Periodo)
                                        .FirstOrDefaultAsync(m => m.ID == viewModel.MtoProgramadoID);

            DateTime Applic = viewModel.FechaAplicacion;
            DateTime MonthYear = new DateTime(Applic.Year, Applic.Month, 1, 0, 0, 0);
            DateTime Programming = _epoch.ObtenerFecha(mtoProgramado.ProximaAplicacion);

            if (!mtoProgramado.Aplicable)
            {
                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                _alertaEstado.Leyenda = "Aún no esta activo el periodo de aplicación para este mantenimiento.";
                _alertaEstado.Estado = false;

                return _alertaEstado;
                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            }

            if (Programming.CompareTo(MonthYear) != 0)
            {
                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                _alertaEstado.Leyenda = "La fecha de aplicación debe estar dentro del periodo programado.";
                _alertaEstado.Estado = false;

                return _alertaEstado;
                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            }

            mtoProgramado.Mantenimiento = new()
            {
                TipoMantenimientoID = viewModel.TipoMantenimientoID,
                ProveedorID = viewModel.ProveedorID,
                CostoMantenimiento = viewModel.CostoMantenimiento,
                CostoReparacion = viewModel.CostoReparacion ?? 0,
                Observaciones = viewModel.Observaciones,
                FechaAplicacion = _epoch.CrearEpoch(viewModel.FechaAplicacion)
            };

            mtoProgramado.Aplicado = true;
            mtoProgramado.Aplicable = false;
            mtoProgramado.Estado = false;

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            var newMto = CrearObjeto(Programming, mtoProgramado.Equipo.Variante.Periodo.Meses);
            newMto.EquipoID = mtoProgramado.EquipoID;

            _context.Add(newMto);
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            _alertaEstado.Leyenda =
                $"Mantenimiento aplicado. El proximo mantenimiento sera para {_epoch.ObtenerMesYAnio(_epoch.ObtenerFecha(newMto.ProximaAplicacion))}";
            _alertaEstado.Estado = true;

            return _alertaEstado;
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
        }